{
    "id": "MG7RVCPDDN",
    "codeString": "import { useEffect, useState } from \"react\";import { useMyMoviesContext } from \"../../context/myMoviesStateContext\";\nimport { Result } from \"../../types/types\";\n\ntype ScoreProps = {\n    ratedMovie: Result,\n    type: 'mine' | 'overall',\n}\n\nconst Score = ({\n    ratedMovie,\n    type,\n}: ScoreProps) => {\n    const voteAverage = type === 'mine' ? ratedMovie?.rating : type === 'overall' ? ratedMovie?.vote_average : undefined;\n    const voteAveragePercentage = Math.ceil(voteAverage ? voteAverage *  10 : 0);\n    const formattedVoteAveragePercentage = `${voteAveragePercentage}%`;\n    const [percent, setPercent] = useState(0);\n    const circumference =  2 * Math.PI *  30;\n\n    useEffect(() => {\n        setPercent(voteAveragePercentage);\n    }, [ratedMovie]);\n\n    return (\n        <div className=\"absolute -top-10 right-0 md:-right-10 z-10 flex items-center justify-center group\">\n            <svg className=\"w-20 h-20\">\n                <circle\n                    className=\"text-stone-200\"\n                    strokeWidth=\"5\"\n                    stroke=\"currentColor\"\n                    fill={type === 'mine' ? 'rgb(124 45 18)' : type === 'overall' ? 'rgb(4  47  46)' : undefined}\n                    r=\"30\"\n                    cx=\"40\"\n                    cy=\"40\"\n                />\n                <circle\n                    className={type === 'mine' ? \"text-orange-500\" : type === 'overall' ? \"text-teal-500\" : undefined}\n                    strokeWidth=\"5\"\n                    strokeDasharray={circumference}\n                    strokeDashoffset={circumference - percent /  100 * circumference}\n                    strokeLinecap=\"round\"\n                    stroke=\"currentColor\"\n                    fill=\"transparent\"\n                    r=\"30\"\n                    cx=\"40\"\n                    cy=\"40\"\n                />\n            </svg>\n            <span \n                className={`absolute text-sm ${type === 'mine' ? \"text-orange-500\" : type === 'overall' ? \"text-teal-500\" : undefined} font-bold`}\n            >{formattedVoteAveragePercentage}</span>\n            <span className=\"absolute w-32 bottom-16 left-1/2 transform -translate-x-1/2 scale-0 rounded bg-white p-2 text-stone-900 text-center font-bold transition duration-200 ease-in-out opacity-0 group-hover:opacity-100 group-hover:scale-100\">\n                {type === 'mine' ? 'My rating' : type === 'overall' ? 'Overall rating' : undefined}\n            </span>\n        </div>\n    )\n};\n\nexport default Score;",
    "title": "Score",
    "explanation": "",
    "file": "myMovies/components/score/index.tsx",
    "toDo": [],
    "displayPath": "myMovies/components/score/index.tsx"
}