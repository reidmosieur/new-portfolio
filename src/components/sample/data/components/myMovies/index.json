{
    "id": "TX9UICL2Z2",
    "codeString": "import Link from \"next/link\";\nimport MyMoviesContainer from \"./components/container\";\nimport { MyMoviesContextProvider } from \"./context/myMoviesStateProvider\";\nimport Sample from \"../sample\";\n\nconst MyMovies = () => {\n    return (\n        <MyMoviesContextProvider>\n            <section className=\"relative flex flex-col flex-wrap content-center\" id=\"my-movies\" >\n                <h2 className=\"text-xl sm:text-2xl lg:text-3xl font-bold\" >What I've been watching:</h2>\n                <MyMoviesContainer />\n                <small className=\"text-stone-300 text-center mt-4\" >Data courtesy of <Link className=\"underline text-[#48b5e3]\" href={'https://www.themoviedb.org'} >The Movie Database</Link></small>\n                <Sample headerJsonName=\"myMovies\" />\n            </section>\n        </MyMoviesContextProvider>\n    )\n}\n\nexport default MyMovies;",
    "title": "My Movies",
    "explanation": "## Explanation\n\nThis is a simple implementation of API consumption and usage on the front end. The API, [The Movie Database](https://developer.themoviedb.org/reference/intro/getting-started), provides a simple way to create lists of movies that I've watched, rated, and want to watch in the future. I found it while I was looking for a public API for one of the games, Cinemoji, and decided to use it some more here.\n\nAt the end of the day, it's really a simple interaction between their REST APIs and how I display that data. The data is called and stored using React's useContext hook, which tradesoff some of the granular control for data and state by way of making visualization and complexity of controlling state a lot simpler. Every poster image that comes from TMDB has standard dimmensions which meant they were perfect for a grid, which also made implementing a details card for a selected movie very simple.\n\nOverall, this really goes to show how elegant the interactions between the front end of an app and the back end of an app can be. When we are limited to the parameters others set for us, as is the case with any external API, we have to be creative about how we're operating within those artificial confines and, in my opinion, that can very often be a good thing.\n\nThis is not only the case here, but I also had the same logic for my programmatic SEO marketing site [HelloAsync](https://www.helloasync.com). The data I used to compile 155 pages was really just 119 unique features across 16 existing tools in the space. That extremely simple data led to 2 different types of \"articles\" that could be generated programmatically, and was the basis of my pricing page directly. Again, prioritizing elegance over complexity.",
    "file": "myMovies/index.tsx",
    "toDo": [],
    "displayPath": "myMovies/index.tsx"
}