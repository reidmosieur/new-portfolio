{
    "id": "W3LU9ZABCA",
    "codeString": "import MyTopSpotifyContainer from \"./components/container\";\nimport { SpotifyContextProvider } from \"./context/spotifyStateProvider\";\n\nconst MySpotify = () => {\n    return (\n        <SpotifyContextProvider>\n            <MyTopSpotifyContainer />\n        </SpotifyContextProvider>\n    )\n};\n\nexport default MySpotify;",
    "title": "My Spotify",
    "explanation": "## Explanation\n\nThe Spotify API is an excellent option for any developer to show their skills with an API. They use OAuth so you have to be familiar with authentication and authorization, data about listening habits is very \"simple\" (at least when you're consuming it - Spotify is a [massively complex service](https://engineering.atspotify.com/, \"The Spotify engineering blog is worth a read\")), and everybody loves their own taste in music.\n\nHere is my one gripe about the Spotify API: there is no way to access a specific users top data with a preauthenticated access token. Sure, I could have built this display of listening habits and then let you, my wonderful reader, check out your own recent listening. But how would that tell you any more about me than what you already know (that I'm an excellent, charming developer)? So, here is the rub: the data that's displayed right here is frozen in time. Sure, A Day to Remember is my number 1 artist, and given that they have been for going on 10 years I doubt that will change. But my number one track being \"Second Chance\" by Shinedown? Don't get me wrong, I love that song (clearly) but check back again in two weeks and who knows what it will be. \"Bad Romance\" by Lady Gaga? Maybe. \"Szechuan Peppercorns\" by Meyhem Lauren? Possibly.\n\nEither way, just know that this data is not up to date. And that's unfortunate because it peels back some of the personal touch I'm going for. Now, onto the actual code.\n\nJust like my list of rated movies, this really is a simple matter of grabbing some data and displaying it. The card can be adapted simply to display either the track or the artist since it's really just an image and some text. Then, it's just taking that data, overlaying it on the component, and adding them to a Pinterest style masonry grid and we're done.\n\nThe point is that most of the time, the interactions between the front end and back end are meant to be elegant and simple, and operating within the confines of an external API and the data that you are allowed to access requires creativity and can lead to good things.\n\nThis is not only the case here, but I also had the same logic for my programmatic SEO marketing site [HelloAsync](https://www.helloasync.com). The data I used to compile 155 pages was really just 119 unique features across 16 existing tools in the space. That extremely simple data led to 2 different types of \"articles\" that could be generated programmatically, and was the basis of my pricing page directly. Again, prioritizing elegance over complexity.",
    "file": "mySpotify/index.tsx",
    "toDo": [],
    "displayPath": "mySpotify/index.tsx"
}