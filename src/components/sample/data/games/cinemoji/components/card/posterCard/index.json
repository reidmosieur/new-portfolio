{
    "id": "KI5MKWMJ98",
    "codeString": "import Image from \"next/image\";\nimport { TMDBMovie } from \"../../../types/types\";\nimport { useEffect, useState } from \"react\";\nimport { useSpring, animated } from '@react-spring/web';\nimport { useCinemojiContext } from \"../../../context/cinemojiStateContext\";\nimport setCinemojiState from \"../../../helpers/setCinemojiState\";\nimport { useTimeout } from \"react-use\";\n\ninterface MoviePosterCardProps {\n    title: string;\n}\n\ninterface ChoiceContainerProps {\n    children: React.ReactNode,\n    onClick?: () => void,\n    answerAnimation?: any,\n}\n\nconst ChoiceContainer = ({\n    children,\n    onClick,\n    answerAnimation,\n}: ChoiceContainerProps) => {\n    const [hover, setHover] = useState(false);\n    const props = useSpring({\n        transform: hover ? 'scale(1.05)' : 'scale(1)',\n        config: { tension:   200, friction:   20 },\n    });\n\n    const handleMouseEnter = () => setHover(true);\n    const handleMouseLeave = () => setHover(false);\n\n    return (\n        <animated.div style={answerAnimation} >\n            <animated.div style={props}>\n                <button\n                    onClick={onClick}\n                    className=\"w-[200px] h-[300px] p-2 rounded bg-stone-300\"\n                    onMouseEnter={handleMouseEnter}\n                    onMouseLeave={handleMouseLeave}\n                >\n                    {children}\n                </button>\n            </animated.div>\n        </animated.div>\n    );\n};\n\nconst findMovieByTitle = (title: string, movieResponses: TMDBMovie[]) => {\n    return movieResponses.find(movie => movie.title === title);\n};\n\nconst MoviePosterCard = ({\n    title,\n}: MoviePosterCardProps) => {\n    const {\n        movieResponses,\n        setDisplayResults,\n        setAnsweredCorrectly,\n    } = useCinemojiContext();\n    const [movieResponse, setMovieResponse] = useState<TMDBMovie>();\n\n    const [flip, setFlip] = useState(false);\n    const [shake, setShake] = useState(false);\n\n    const flipAnimation = useSpring({\n        transform: flip ? 'rotateY(360deg)' : 'rotateY(0deg)',\n        config: { tension:  200, friction:  20 },\n        onResolve: () => setFlip(false),\n    });\n    \n    const shakeAnimation = useSpring({\n        from: { transform: 'translateX(0px) translateY(0px) rotate(0deg)' },\n        to: shake ? async next => {\n            await next({ transform: 'translateX(10px) translateY(0px) rotate(0deg)' });\n            await next({ transform: 'translateX(-10px) translateY(0px) rotate(0deg)' });\n            await next({ transform: 'translateX(10px) translateY(0px) rotate(0deg)' });\n            await next({ transform: 'translateX(-10px) translateY(0px) rotate(0deg)' });\n            await next({ transform: 'translateX(10px) translateY(0px) rotate(0deg)' });\n            await next({ transform: 'translateX(-10px) translateY(0px) rotate(0deg)' });\n            await next({ transform: 'translateX(10px) translateY(0px) rotate(0deg)' });\n            await next({ transform: 'translateX(-10px) translateY(0px) rotate(0deg)' });\n            await next({ transform: 'translateX(10px) translateY(0px) rotate(0deg)' });\n            await next({ transform: 'translateX(-10px) translateY(0px) rotate(0deg)' });\n            await next({ transform: 'translateX(10px) translateY(0px) rotate(0deg)' });\n            await next({ transform: 'translateX(-10px) translateY(0px) rotate(0deg)' });\n            await next({ transform: 'translateX(10px) translateY(0px) rotate(0deg)' });\n            await next({ transform: 'translateX(-10px) translateY(0px) rotate(0deg)' });\n            await next({ transform: 'translateX(10px) translateY(0px) rotate(0deg)' });\n            await next({ transform: 'translateX(-10px) translateY(0px) rotate(0deg)' });\n            await next({ transform: 'translateX(10px) translateY(0px) rotate(0deg)' });\n            await next({ transform: 'translateX(-10px) translateY(0px) rotate(0deg)' });\n            await next({ transform: 'translateX(10px) translateY(0px) rotate(0deg)' });\n            await next({ transform: 'translateX(-10px) translateY(0px) rotate(0deg)' });\n            await next({ transform: 'translateX(0px) translateY(0px) rotate(0deg)' });\n        } : { transform: 'translateX(0px) translateY(0px) rotate(0deg)' },\n        config: { tension: 0, friction: 200 },\n        onResolve: () => setShake(false),\n    });\n\n    const handleClick = () => {\n        if (movieResponse?.correctAnswer) {\n            setFlip(true);\n        } else {\n            setShake(true);\n        }\n\n        setDisplayResults(true);\n        setAnsweredCorrectly(movieResponse?.correctAnswer || false);\n    };\n\n    useEffect(() => {\n        if (movieResponses.length >  0) {\n            const thisMovieResponse = findMovieByTitle(title, movieResponses);\n            setMovieResponse(thisMovieResponse);\n        }\n    }, [movieResponses]);\n\n    if (movieResponse?.poster_path) {\n        const basePosterURL = 'https://image.tmdb.org/t/p/w200';\n        const moviePosterURL = basePosterURL + movieResponse?.poster_path;\n\n        return (\n            <ChoiceContainer\n                onClick={handleClick}\n                answerAnimation={movieResponse?.correctAnswer ? flipAnimation : shakeAnimation}\n            >\n                <Image src={moviePosterURL} alt={title} width={200} height={300} className=\"rounded shadow shadow-lg shadow-stone-400\" />\n            </ChoiceContainer>\n        );\n    }\n\n    return (\n        <ChoiceContainer\n            onClick={handleClick}\n            answerAnimation={movieResponse?.correctAnswer ? flipAnimation : shakeAnimation}\n        >\n            <span className=\"font-bold text-stone-900\" >{title}</span>\n        </ChoiceContainer>\n    )\n};\n\nexport default MoviePosterCard;",
    "title": "Poster Card",
    "explanation": "",
    "file": "data/games/cinemoji/components/card/posterCard/index.tsx",
    "toDo": [],
    "displayPath": "data/games/cinemoji/components/card/posterCard/index.tsx"
}