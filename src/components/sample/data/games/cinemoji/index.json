{
    "id": "MJ33W5O5YT",
    "codeString": "import { SampleCodeContextProvider } from \"@/components/sample/context/samplesStateProvider\";\nimport Cinemoji from \"./components/cinemoji\";\nimport { CinemjoiContextProvider } from \"./context/cinemojiStateProvider\";\nimport FullScreenCentered from \"@/components/container/fullScreenCentered\";\n\nconst Index = () => {\n    return (\n        <SampleCodeContextProvider>\n            <CinemjoiContextProvider>\n                <FullScreenCentered>\n                    <Cinemoji />\n                </FullScreenCentered>\n            </CinemjoiContextProvider>\n        </SampleCodeContextProvider>\n    )\n}\n\nexport default Index;",
    "title": "Cinemoji",
    "explanation": "## Explanation\n\nThis is just a simple game I wanted to make to break up the monotony of reading through all of the resumes and portfolio pages I'm sure you're slogging through. It was inspired by a trend I've seen on TikTok where you...do exactly what this game is. They show you some emojis, you test your movie knowledge to see if you get it right. Very simple.\n\nAnd this implementation, especially compared to the Wordle clone, is much more simple. This time, I was smart enough to start with useContext instead of thinking regular state would be sufficient. Additionally, it really is just as simple as having my movies and their corresponding emoji strings already set, choosing 4 at random, and calling that data from The Movie Database via API to get the poster and it's other details. The overall logic is extremely simple.\n\nOne of the most interesting things I did, before finding TMDB for my API, was scraping the top 100 movies from IMDBs top 100 page using Python. I then took that list over to ChatGPT to generate the emoji strings (which was great because there's a surprising amount of movies on that list that I've never seen).\n\nThe focus of every mini project on this page has been on elegance. Simple front end interactions with simple, external APIs and simple proprietary data I've compiled. This is not only the case with these mini projects, but I also had the same logic for my programmatic SEO marketing site [HelloAsync](https://www.helloasync.com). The data I used to compile 155 pages was really just 119 unique features across 16 existing tools in the space. That extremely simple data led to 2 different types of \"articles\" that could be generated programmatically, and was the basis of my pricing page directly. Again, prioritizing elegance over complexity.",
    "file": "data/games/cinemoji/index.tsx",
    "toDo": [],
    "displayPath": "data/games/cinemoji/index.tsx"
}