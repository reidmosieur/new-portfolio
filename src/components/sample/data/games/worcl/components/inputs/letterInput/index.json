{
    "id": "COL1WJT3MT",
    "codeString": "import { RowType, SingleCharacter, WordleHistory } from \"../../../types/types\";\nimport { useGameState } from \"../../../context/gameStateContext\";\n\ninterface LetterInputProps {\n    letterIndex: number;\n    rowIndex: number;\n    rowType: RowType;\n}\n\nconst LetterInput = ({\n    letterIndex,\n    rowIndex,\n    rowType,\n}: LetterInputProps) => {\n    const {\n      answer,\n      setAnswer,\n      guesses,\n      setGuesses,\n      currentGuess,\n      setCurrentGuess,\n      gameResultsState,\n      setGameResultsState,\n      setDisplayResults,\n      history,\n      setHistory,\n      wordLength,\n    } = useGameState();\n\n    // Define the valid characters for SingleCharacter\n    const validCharacters: SingleCharacter[] = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n\n    const handleSubmit = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (currentGuess.word.length !== answer.length) {\n            alert('Enter more characters');\n            return;\n        }\n\n        if (currentGuess.word.join('') === answer.join('')) {\n            setGameResultsState({\n                isGameFinished: true,\n                isGameWon: true,\n            });\n            setDisplayResults(true);\n\n            guesses.push(currentGuess);\n\n            const newHistoryRecord: WordleHistory = {\n                wordLength: wordLength,\n                answer: answer,\n                guesses: guesses,\n                currentGuess: currentGuess,\n                gameResultsState: {\n                    isGameFinished: true,\n                    isGameWon: true,\n                },\n            };\n\n            // After creating the newHistoryRecord, append it to the existing history array\n            const updatedHistory = [newHistoryRecord, ...(history ?? [])];\n\n            // Store the updated history array in sessionStorage\n            sessionStorage.setItem('worcl-history', JSON.stringify(updatedHistory));\n\n            // Update the state with the new history array\n            setHistory(updatedHistory);\n        }\n\n        if (rowIndex === answer.length - 1 && currentGuess.word.join('')!== answer.join('')) {\n            setGameResultsState({\n                isGameFinished: true,\n                isGameWon: false,\n            })\n            setDisplayResults(true);\n\n            guesses.push(currentGuess);\n\n            const newHistoryRecord: WordleHistory = {\n                wordLength: wordLength,\n                answer: answer,\n                guesses: guesses,\n                currentGuess: currentGuess,\n                gameResultsState: {\n                    isGameFinished: true,\n                    isGameWon: false,\n                },\n            };\n\n            // After creating the newHistoryRecord, append it to the existing history array\n            const updatedHistory = [newHistoryRecord, ...(history ?? [])];\n\n            // Store the updated history array in sessionStorage\n            sessionStorage.setItem('worcl-history', JSON.stringify(updatedHistory));\n\n            // Update the state with the new history array\n            setHistory(updatedHistory);\n        }\n\n        const newWord = [...currentGuess.word];\n        newWord[letterIndex] = (e.target as HTMLInputElement).value.toUpperCase() as SingleCharacter; // Update the current cell\n        setCurrentGuess({\n            word: [],\n            correct: undefined,\n        });\n\n        setGuesses(prev => {\n            const newGuesses = [...prev];\n            newGuesses[rowIndex] = {\n                word: newWord,\n                correct: undefined,\n            };\n            return newGuesses;\n        });\n\n        const newHistoryRecord: WordleHistory = {\n            wordLength: wordLength,\n            answer: answer,\n            guesses: guesses,\n            currentGuess: currentGuess,\n            gameResultsState: {\n                isGameFinished: false,\n                isGameWon: false,\n            },\n        };\n    }\n\n    const handleOnKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {    \n        if (e.key === 'Enter') {\n            e.preventDefault(); // Prevent the default behavior of Enter\n            handleSubmit(e);\n        }\n    \n        // Check for Backspace key\n        if (e.key === 'Backspace') {\n            e.preventDefault(); // Prevent the default behavior of Backspace\n            setCurrentGuess(prev => {\n                const newWord = [...prev.word];\n                newWord[letterIndex] = '' as SingleCharacter; // Clear the current cell\n                return {\n                    word: newWord,\n                    correct: prev.correct,\n                };\n            });\n            // Set focus back to the current cell\n            (e.target as HTMLElement).focus();\n        } else {\n            // Check if the key pressed is a valid character\n            const upperCaseValue = e.key.toUpperCase();\n            if (validCharacters.includes(upperCaseValue as SingleCharacter)) {\n                setCurrentGuess(prev => {\n                    const newWord = [...prev.word];\n                    newWord[letterIndex] = upperCaseValue as SingleCharacter;\n                    return {\n                        word: newWord,\n                        correct: prev.correct,\n                    };\n                });\n            }\n        }\n    };\n\n    const handleOnKeyUp = (e: React.KeyboardEvent<HTMLInputElement>) => {    \n        // Check for Shift+Tab combination\n        if ((e.shiftKey && e.key === 'Tab') || e.key === 'Tab' || e.key === 'Shift') {\n            e.preventDefault(); // Prevent the default behavior of Shift+Tab, Tab, and Shift\n            return;\n        } else if (e.key === 'ArrowLeft' || e.key === 'ArrowUp') {\n            // Move focus to the previous input field\n            const prevInputId = `letter-${rowIndex}-${letterIndex -  1}-input`;\n            const prevInputElement = document.getElementById(prevInputId);\n            if (prevInputElement instanceof HTMLInputElement) {\n                prevInputElement.focus();\n            }\n        } else if (e.key === 'ArrowRight' || e.key === 'ArrowDown') {\n            // Move focus to the next input field\n            const nextInputId = `letter-${rowIndex}-${letterIndex +  1}-input`;\n            const nextInputElement = document.getElementById(nextInputId);\n            if (nextInputElement instanceof HTMLInputElement) {\n                nextInputElement.focus();\n            }\n        }\n    \n        // Check if the key pressed is a valid character\n        if (!validCharacters.includes(e.key.toUpperCase() as SingleCharacter)) {\n            return; // Exit early if the key is not a valid character\n        }\n    \n        // Set focus to the next input field\n        const nextInputId = `letter-${rowIndex}-${letterIndex +  1}-input`;\n        const nextInputElement = document.getElementById(nextInputId);\n        if (nextInputElement instanceof HTMLInputElement) {\n            nextInputElement.focus();\n        }\n    };\n\n    if (rowType === 'currentGuess' && !gameResultsState.isGameFinished) {\n        return (\n            <input\n                id={`letter-${rowIndex}-${letterIndex}-input`}\n                maxLength={1}\n                onKeyDown={handleOnKeyDown}\n                onKeyUp={handleOnKeyUp}\n                value={currentGuess.word[letterIndex]}\n                className=\"w-8 h-8 md:w-12 md:h-12 lg:w-16 lg:h-16 bg-gray-100 rounded text-center text-2xl md:text-4xl lg:text-5xl leading-none flex items-center justify-center focus:outline-none focus:ring focus:ring-blue-300 focus:ring-offset-2 focus:underline caret-transparent single-character-selection\"\n            />\n        );\n    }\n\n    if (rowType === 'pastGuess') {\n        const pastGuess = guesses[rowIndex];\n        const letter = pastGuess.word[letterIndex];\n\n        const answerLetter = answer[letterIndex];\n\n        const getPastGuessStyles = () => {\n            const baseStyles = 'w-8 h-8 md:w-12 md:h-12 lg:w-16 lg:h-16 text-center text-2xl md:text-4xl lg:text-5xl leading-none flex items-center justify-center rounded';\n            const isCorrectPosition = answerLetter === letter;\n            const isInAnswer = answer.includes(letter);\n            const background = isCorrectPosition ? 'bg-green-500' : isInAnswer ? 'bg-yellow-500' : 'bg-gray-300';\n            const styles = `${baseStyles} ${background}`;\n            return styles;\n        };\n\n        return (\n            <span\n                id={`letter-${rowIndex}-${letterIndex}`}\n                className={getPastGuessStyles()}\n            >\n                {letter}\n            </span>\n        )\n    }\n\n    if (rowType === 'futureGuess') {\n        return (\n            <span className=\"w-8 h-8 md:w-12 md:h-12 lg:w-16 lg:h-16 bg-white rounded\" />\n        )\n    }\n};\n\nexport default LetterInput;",
    "title": "Letter Input",
    "explanation": "",
    "file": "data/games/worcl/components/inputs/letterInput/index.tsx",
    "toDo": [],
    "displayPath": "data/games/worcl/components/inputs/letterInput/index.tsx"
}