{
    "id": "MCDSWKPSUK",
    "codeString": "import { useState } from \"react\";\nimport { generate } from \"random-words\";\nimport { useEffect } from \"react\";\nimport { useGameState } from \"../../context/gameStateContext\";\nimport { SingleCharacter, WordResponse } from \"../../types/types\";\nimport GridContainer from \"../inputs/gridContainer\";\nimport LetterCount from \"../inputs/letterCount\";\nimport SimpleModal from \"@/components/modal/simpleModal\";\nimport axios from \"axios\";\nimport AnswerDefinitions from \"../answerDefinitions\";\nimport Button from \"@/components/button\";\nimport History from \"../history\";\nimport { QueueListIcon } from \"@heroicons/react/24/outline\";\nimport ModalContainer from \"@/components/modal/modalContainer\";\nimport Sample from \"@/components/sample\";\nimport Link from \"next/link\";\n\nconst Wordle = () => {\n    const gameContext = useGameState();\n    const {\n        wordLength,\n        setWordLength,\n        answer,\n        setAnswer,\n        guesses,\n        setGuesses,\n        currentGuess,\n        setCurrentGuess,\n        gameResultsState,\n        setGameResultsState,\n        displayResults,\n        setDisplayResults,\n        history,\n        setHistory,\n    } = gameContext;\n\n    const [answerDefinitions, setAnswerDefinitions] = useState<WordResponse | undefined>();\n    const [requestingDefinition, setRequestingDefinition] = useState<boolean>(true);\n    const [showHistory, setShowHistory] = useState<boolean>(false);\n\n    const answerString = answer.join('');\n\n    const generateNewWord = () => {\n        setGuesses([]);\n        setCurrentGuess({\n            word: [],\n            correct: undefined,\n        });\n        const wordString = generate({ minLength: wordLength, maxLength: wordLength, exactly: 1 })[0].toUpperCase();\n        const wordArray = wordString.split('') as SingleCharacter[];\n\n        setAnswer(wordArray);\n    }\n\n    useEffect(() => {\n        generateNewWord();\n    }, [wordLength])\n\n    useEffect(() => {\n        if (displayResults) {\n            axios.get(`https://api.dictionaryapi.dev/api/v2/entries/en/${answerString}`)\n            .then(response => {\n                setAnswerDefinitions(response.data);\n                setRequestingDefinition(false);\n             })\n        }\n    }, [displayResults])\n\n    useEffect(() => {\n        const localHistory = sessionStorage.getItem('worcl-history');\n        \n        if (localHistory) {\n            const parsedLocalHistory = JSON.parse(localHistory);\n            if (parsedLocalHistory) {\n                setHistory(parsedLocalHistory);\n            }\n        }\n    }, [])\n    \n    if (gameContext) {\n        return (\n            <div className=\"relative max-w-xs sm:container mx-auto px-4 py-2 md:px-6 md:py-4 lg:px-8 lg:py-4 flex flex-col flex-wrap gap-8 bg-stone-800 rounded-md\" >\n                <div className=\"columns-1 space-y-1\" >\n                    <span className=\"flex flex-row flex-nowrap gap-8 justify-between\" >\n                        <h1 className=\"text-5xl sm:text-6xl lg:text-7xl\" >Worcl</h1>\n                        <div className=\"group relative flex justify-center\">\n                            <button\n                                onClick={() => setShowHistory(!showHistory)}\n                                id=\"history-button\"\n                                className=\"relative z-10 my-auto\" // Ensure the button is above the tooltip\n                            >\n                                <QueueListIcon className=\"w-8 h-8 my-auto\" />\n                            </button>\n                            <span className=\"absolute w-32 bottom-12 left-1/2 transform -translate-x-1/2 scale-0 rounded bg-white p-2 text-stone-900 text-center font-bold transition duration-200 ease-in-out opacity-0 group-hover:opacity-100 group-hover:scale-100\">\n                                View History\n                            </span>\n                        </div>\n                    </span>\n                    <small className=\"text-wrap\" >This is just like <Link href=\"https://www.nytimes.com/games/wordle/index.html\" >Wordle</Link>, only you get to choose how long the word is.</small>\n                </div>\n                <div className=\"mx-auto flex flex-col flex-wrap gap-4\" >\n                    <div className=\"w-full flex flex-col flex-wrap gap-2\" >\n                        <span className=\"text-white font-bold text-xl\" >Worcl length:</span>\n                        <LetterCount />\n                        <small className=\"text-white\" >Your guesses are equal to the worcl length as well</small>\n                    </div>\n                </div>\n                <form \n                    className=\"max-w-full overflow-x-scroll mx-auto text-black flex flex-col flex-wrap gap-4\" \n                >\n                    <GridContainer />\n                </form>\n                <Button\n                    content=\"New Word\"\n                    onClick={generateNewWord}\n                    buttonType=\"primary\"\n                />\n                <ModalContainer \n                    open={showHistory} \n                    setOpen={setShowHistory}\n                >\n                    {history && history?.length > 0 && <History />}\n                </ModalContainer>\n                <SimpleModal \n                    open={displayResults} \n                    setOpen={setDisplayResults} \n                    title={'Results'} \n                    actions={[\n                        {\n                            content: 'New Word',\n                            onClick: () => {\n                                setDisplayResults(false);\n                                setGameResultsState({\n                                    isGameFinished: false,\n                                    isGameWon: false,\n                                });\n                                setGuesses([]);\n                                setCurrentGuess({\n                                    word: [],\n                                    correct: undefined,\n                                });\n                                generateNewWord();\n                            },\n                            buttonType: 'primary'\n                        },\n                        {\n                            content: 'Close',\n                            onClick: () => setDisplayResults(false),\n                            buttonType: 'secondary'\n                        },\n                    ]} \n                >\n                <div className={`max-h-96 ${!requestingDefinition && 'overflow-y-scroll'}`} >\n                    {requestingDefinition ?\n                        <p>Loading...</p>\n                        :\n                        <>\n                            {gameResultsState.isGameWon ?\n                                <p>Wowzers, great job! The word <u>was</u> \"{answerString.toLowerCase()}\".</p>\n                                :\n                                <p>Great try! The word was \"{answerString.toLowerCase()}\".</p>\n                            }\n                            {answerDefinitions && <AnswerDefinitions answerDefinitions={answerDefinitions} />}\n                        </>\n                    }\n                </div>\n                </SimpleModal>\n                <Sample headerJsonName=\"worcl\" />\n            </div>\n        )\n    }\n\n    return (\n        <p>Loading...</p>\n    )\n}\n\nexport default Wordle;",
    "title": "Wordle",
    "explanation": "",
    "file": "data/games/worcl/components/wordle/index.tsx",
    "toDo": [],
    "displayPath": "data/games/worcl/components/wordle/index.tsx"
}