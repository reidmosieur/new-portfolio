{
    "id": "XYT8RYPXUG",
    "codeString": "import React, { useRef } from 'react';\nimport { WordResponse } from '../../types/types';\nimport { PauseIcon, PlayIcon } from '@heroicons/react/24/outline';\n\ninterface AnswerDefinitionProps {\n    answerDefinitions: WordResponse;\n}\n\nconst AnswerDefinitions: React.FC<AnswerDefinitionProps> = ({ answerDefinitions }) => {\n    const audioRef = React.useRef<(HTMLAudioElement | null)[]>([]);\n    const [isPlaying, setIsPlaying] = React.useState(Array(answerDefinitions[0].phonetics.length).fill(false));\n\n    const togglePlay = (index: number) => {\n        if (audioRef.current[index]) {\n            if (audioRef?.current[index]?.paused) {\n                audioRef?.current[index]?.play();\n                setIsPlaying(prevState => prevState.map((state, i) => i === index ? true : state));\n            } else {\n                audioRef?.current[index]?.pause();\n                setIsPlaying(prevState => prevState.map((state, i) => i === index ? false : state));\n            }\n        }\n    };\n\n    return (\n        <ul className='mt-4 flex flex-col flex-wrap gap-4' >\n            {answerDefinitions.map((responseItem, index) => (\n                <li key={index} >\n                    <ul key={index} className='flex flex-col flex-wrap gap-8' >\n                        {responseItem.meanings.map((meaning, meaningIndex) => (\n                            <li key={meaningIndex} className='flex flex-col flex-wrap gap-3' >\n                                <p><strong>Part of Speech:</strong> {meaning.partOfSpeech}</p>\n                                {meaning.synonyms.length > 0 && <p><strong>Synonyms:</strong> {meaning.synonyms.join(', ')}</p>}\n                                {meaning.antonyms.length > 0 && <p><strong>Antonyms:</strong> {meaning.antonyms.join(', ')}</p>}\n                                <div className='flex flex-col flex-wrap gap-1' >\n                                    <p><strong>Definitions:</strong></p>\n                                    <ul className='flex flex-col flex-wrap gap-1 list-disc' >\n                                        {meaning.definitions.map((definition, defIndex) => (\n                                            <li className='ml-4' key={defIndex}>{definition.definition}</li>\n                                        ))}\n                                    </ul>\n                                </div>\n                                {meaning.definitions.some(definition => definition.example) &&\n                                    <>\n                                        <p><strong>Examples:</strong></p>\n                                        <ul className='flex flex-col flex-wrap gap-1 list-disc'>\n                                            {meaning.definitions.filter(definition => definition.example).map((definition, defIndex) => (\n                                                <li className='ml-4' key={defIndex}><p>{definition.example}</p></li>\n                                            ))}\n                                        </ul>\n                                    </>\n                                }\n                            </li>\n                        ))}\n                        {responseItem.phonetics.length > 0 &&\n                            <div className='flex flex-col flex-wrap gap-1'>\n                                <p><strong>Pronunciations:</strong></p>\n                                {responseItem.phonetics.map((pronunciation, pronIndex) => (\n                                    <li key={pronIndex} className='flex flex-row flex-nowrap gap-2'>\n                                        {pronunciation.audio || pronunciation.text ?  \n                                            <div className='flex flex-nowrap gap-1'>\n                                                {pronunciation.audio && (\n                                                    <>\n                                                        <audio   \n                                                            ref={el => {\n                                                                if (audioRef.current) {\n                                                                    audioRef.current[pronIndex] = el\n                                                                }\n                                                            }}   \n                                                            src={pronunciation.audio}   \n                                                            style={{ display: 'none' }}   \n                                                            onPlay={() => setIsPlaying(prevState => prevState.map((state, i) => i === pronIndex ? true : state))}   \n                                                            onPause={() => setIsPlaying(prevState => prevState.map((state, i) => i === pronIndex ? false : state))}   \n                                                            onEnded={() => setIsPlaying(prevState => prevState.map((state, i) => i === pronIndex ? false : state))}   \n                                                        />\n                                                        <button onClick={() => togglePlay(pronIndex)}>\n                                                            {!isPlaying[pronIndex] ? <PlayIcon className='w-6 h-6' /> : <PauseIcon className='w-6 h-6' />}\n                                                        </button>\n                                                    </>\n                                                )}\n                                                {pronunciation.text && <p>{pronunciation.text}</p>}\n                                            </div>\n                                            : null\n                                        }\n                                    </li>\n                                ))}\n                            </div>\n                        }\n                    </ul>\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nexport default AnswerDefinitions;",
    "title": "Answer Definitions",
    "explanation": "",
    "file": "data/games/worcl/components/answerDefinitions/index.tsx",
    "toDo": [],
    "displayPath": "data/games/worcl/components/answerDefinitions/index.tsx"
}